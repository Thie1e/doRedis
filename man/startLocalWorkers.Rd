% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/redisWorker.R
\name{startLocalWorkers}
\alias{startLocalWorkers}
\title{Start one or more background R worker processes on the local system.}
\usage{
<<<<<<< HEAD
startLocalWorkers(n, queue, host = "localhost",
                  port = 6379, iter = Inf,
                  timeout = 30, log = stdout(),
                  Rbin = paste(R.home(component="bin"),"R",sep="/"),
                  password=NULL)
}
\arguments{
  \item{n}{
The number of workers to start.
}
  \item{queue}{
A (character) work queue name, or a list or character vector of queue names.
}
  \item{host}{
The Redis server host name or (character) I. P. address.
}
  \item{port}{
The Redis server port number.
}
  \item{iter}{
The maximum number of jobs to execute before exiting the worker loop (defaults
to infinity).
}
  \item{timeout}{
The worker loop terminates if the work queue is deleted after the
specified timeout interval.
}
  \item{log}{
Log messages to the specified destination (defaults to stderr()).
}
  \item{Rbin}{
The full path to the command-line R program.
}
  \item{password}{
The Redis server password.
=======
startLocalWorkers(n, queue, host = "localhost", port = 6379, iter = Inf,
  timeout = 30, log = stdout(), Rbin = paste(R.home(component = "bin"),
  "R", sep = "/"), password)
}
\arguments{
\item{n}{The number of workers to start.}

\item{queue}{The doRedis work queue name.}

\item{host}{The Redis database host name or IP address.}

\item{port}{The Redis database port number.}

\item{iter}{Maximum number of tasks to process before exiting the worker loop.}

\item{timeout}{Timeout in seconds after which the work queue is deleted that the worker terminates.}

\item{log}{Log messages to the specified file connection.}

\item{Rbin}{The full path to the command-line R program.}

\item{password}{Optional Redis database password.}
>>>>>>> devel
}
\value{
NULL is invisibly returned.
}
\description{
Use \code{startLocalWorkers} to start one or more doRedis R worker processes
in the background. The worker processes are started on the local system using
the \code{redisWorker} function.
}
\details{
Running workers self-terminate when their work queues are deleted with the
\code{removeQueue} function.
}
\examples{
\dontrun{
require('doRedis')
registerDoRedis('jobs')
startLocalWorkers(n=2, queue='jobs')
print(getDoParWorkers())
foreach(j=1:10,.combine=sum,.multicombine=TRUE) \\\%dopar\\\%
          4*sum((runif(1000000)^2 + runif(1000000)^2)<1)/10000000
removeQueue('jobs')
}
}
\seealso{
\code{\link{registerDoRedis}}, \code{\link{redisWorker}}
}

